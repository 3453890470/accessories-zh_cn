plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven { url "https://maven.neoforged.net/releases/" }
    maven { url "https://maven.su5ed.dev/releases" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url 'https://jitpack.io' }
    mavenCentral()
    //mavenLocal()
}

sourceSets {
    testmod {
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.compileClasspath
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    modApi("me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_version}")

//    include modApi("dev.su5ed.sinytra.fabric-api:fabric-api-base:0.4.35+f77bd0ed4f"){
//        exclude group: "fabric-api"
//    }
    include modApi('com.github.Dragon-Seeker.ForgifiedFabricAPI:fabric-api-base:1.20.4-SNAPSHOT')


    testmodImplementation sourceSets.main.output
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

processTestmodResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

loom {
    runs {
        testmodClient {
            client()
            forgeTemplate "client"
            ideConfigGenerated true
            name = "Testmod Client"
            mods {
                create("testccessories") {
                    sourceSet sourceSets.testmod
                }
                create("${project.archives_base_name}"){
                    sourceSet sourceSets.main
                }
            }
            source sourceSets.testmod
        }
        testmodServer {
            server()
            ideConfigGenerated true
            name = "Testmod Server"
            mods {
                create("testccessories") {
                    sourceSet sourceSets.testmod
                }
                create("${project.archives_base_name}"){
                    sourceSet sourceSets.main
                }
            }
            source sourceSets.testmod
        }
    }

    accessWidenerPath = project(":common").loom.accessWidenerPath

    neoForge  {
        //     convertAccessWideners = true
        //     extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
